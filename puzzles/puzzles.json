{
  "easy": {
    "1": [
      "(2**0).real",
      "int(True)",
      "1 & 1",
      "len(str(2**2))",
      "len('python'[::-1][:1])",
      "math.isqrt(1 ** 4)",
      "(7 % 2) + (4 % 2)",
      "len([[]])",
      "int([1, 2, 3][::-2][-1])",
      "list(range(2))[1]",
      "len(set([3, 3, 3]) & {1, 2, 3})",
      "sum({3: 0, 4: 1}.values())",
      "sum(map(lambda x: x == 2, [2, 0, 4]))",
      "len([3] * 2) // 2",
      "divmod(4, 3)[0]",
      "int(bool(1 + 2 + 3))"
    ],
    "2": [
      "int((lambda x: x if x == 1 else 2)(round(1.5)))",
      "len('hello world'[4:6])",
      "sum([True, False, True])",
      "sum(map(lambda x: x % 3 == 1, range(1, 6)))",
      "bool(4) + bool(-1) + bool(2==1)",
      "min(int(c) for c in '3' + str(3 ** 3))",
      "math.isqrt(2 ** 3)",
      "sum(map(lambda x: x <= 2, [1, 2, 3, 4]))",
      "len([1, '2'] * 5) % 4",
      "int('bugsweeper'.replace('ee','e').count('e'))",
      "max(map(int, '102'+'102'))",
      "int(True) ** int(False) + int(True) ** int(True)"
    ],
    "3": [
      "sum(map(len, ['x', 'y', 'z']))",
      "len('hello'[:-3]) + len('world'[:1])",
      "max(len('123'[::-1]), len('4567'[:2]))",
      "len(list(filter(lambda x: x % 2 == 0, range(5))))",
      "len(set(str(4 ** 4)))",
      "list(range(1, 5))[-2]",
      "sum({1: 0, 2: 1, 3: 2}.values())",
      "int([3, 2, 1][::-1][-1])",
      "len(('bug ' + 'sweeper ')[::-1][2:-7])",
      "1 if [2] in [[22]] else 3"
    ],
    "4": [
      "len('abababab'[:8:2])",
      "(10 // 3) + (10 % 3)",
      "sum(1 for i in range(10) if i % 3 == 0)",
      "max(int(digit) for digit in str(3 ** 5))",
      "sum(1 for x in range(10) if x > 5)",
      "min([x**2 for x in range(2, 6)])",
      "sum(1 for char in 'Hell0' if char.isalpha())",
      "sum(1 for i in range(1, 101) if i % 21 == 0)"
    ],
    "5": [
      "len([c for c in 'bugsweeper' if c in 'pew'])",
      "sum(range(2, 4))",
      "sum(int(digit) for digit in str(2 ** 5))",
      "len({x for x in range(10) if x % 2 == 0})"
    ],
    "6": [
      "len(set('aab')) * len('abc')",
      "(lambda x: x * 2 + bool(3==2))(3)"
    ],
    "7": [
      "len('chocolate'.replace('co', ''))",
      "sum(int(digit) for digit in str(2 ** 4))"
    ],
    "8": [
      "len({*range(2**3)})",
      "sum(map(int, '11222'))"
    ]
  },
  "medium": {
    "1": [
      "def func(s='abcdefghij'):\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char in vowels)\n    return count % 2",
      "def func(lst=[1, 2, 3, 4, 5]):\n    total = sum(i**2 if i % 2 == 0 else i**3 for i in lst)\n    return str(total)[0]",
      "def func(s='racecar'):\n    return int(s == s[::-1])",
      "def func(s1='listen', s2='silent'):\n    return int(sorted(s1) == sorted(s2)) ** 2",
      "def func(n=5):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, (a + b)\n    return a // n",
      "def func(x=2, n=3):\n    result = 1\n    for _ in range(n):\n        result *= x\n    return n ** x % result",
      "def func(n=1234567890):\n    total = sum(int(digit) for digit in str(n))\n    return round(total ** 0.1)",
      "def func(d={'a': 2, 'b': 4, 'c': 8}):\n    a = [v ** 2 for k, v in d.items()]\n    b = sorted(a)\n    c = b[0] - b[-1] + b[1]\n    return b[0] - len(str(c))",
      "def func(lst=[1, 2, 3, 4, 2, 3, 2, 1]):\n    if sum(lst[4:]) <= 8:\n        return sum(lst[:4]) * 0.1\n    else:\n        return sum(lst) * 1/4",
      "def func(l=[10, 20, 30, 40, 50]):\n    total = sum(1 for i in l if i % 2 == 0)\n    return total % 2",
      "def func(n=6):\n    result = [x for x in range(1, n+1)\n               if n % x == 1]\n    return len(result)",
      "def func(lst=[1, 2, 3, 4]):\n    x = sum(x**1 for x in lst)\n    y = sum(x**2 for x in lst)\n    z = sum(x**3 for x in lst)\n    return z % y // x",
      "def func(lst=[[1, 2], [3, 4], [5, 6]]):\n    total = sum(sum(sublst) for sublst in lst)\n    return total % 2)"
    ],
    "2": [
      "def func(n=4):\n    result = 1\n    for i in range(1, n-1):\n        result *= i\n    return result",
      "def func(x=3, y=2):\n    if x % y == 1:\n        return (x + y) // 2\n    else:\n        return x - y",
      "def func(lst=[1, 3, 5, 7, 9]):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i] * 2\n        else:\n            total -= lst[i] * 2\n    return abs(total) % 8",
      "def func(a=4, b=5):\n    res = [a, b]\n    for i in range(1, a):\n        if i % 2 == 0:\n            res.append(i * b)\n        else:\n            res.append(i + a)\n    return max(res) % min(res)",
      "def func(lst=[1, 2, 4, 8]):\n    a = lst[::-1]\n    b = [a[i] * i for i in range(len(a))]\n    c = sum(b) // len(b)\n    return c",
      "def func(lst=[4, 3, 0]):\n    result= sum(x * -1 for x in lst)\n    return len(str(result))",
      "def func(lst=[1, 2, 3, 4, 5]):\n    total = 0\n    for i in lst:\n        if i % 2 == 0:\n            total += i\n    return total // 3",
      "def func(lst=[1, 2, 3, 4]):\n    result = map(lambda x: x ** 2, lst)\n    return sum(result) % 4",
      "def func(lst=[1, 2, 3, 4, 5]):\n    return (lst[-5] - lst[2]) * -1"
    ],
    "3": [
      "def func(a=5, b=7):\n    res = 1\n    while a < b:\n        res *= a\n        a += 1\n    return int(res * 0.1)",
      "def func(lst=[1, 2, 4, 5, 7, 8], k=2):\n    res = [lst[i] * k for i in range(len(lst))\n            if lst[i] % k == 0]\n    return sum(res) % 5",
      "def func(s='12345678', n=3):\n    res = ''.join([s[i] for i in range(len(s))\n                if i % n == 0])\n    return len(res)",
      "def func(a=2, b=3):\n    total = 0\n    for i in range(a):\n        for j in range(b):\n            total += i*j\n    return total",
      "def func(lst=[1, 2, 3, 4, 5]):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 2 == 0:\n            total += val\n        else:\n            total -= val\n    return total",
      "def func(s='abc123'):\n    total = 0\n    for ch in s:\n        if ch.isdigit():\n            total += int(ch)\n        else:\n            total += s.index(ch)\n    return int(total ** 0.5)",
      "def func(nums=[3, 2, 1, 4, 5, 6, 4], k=2):\n    return sorted(nums)[-k**k-1]",
      "import statistics\n\ndef func(nums=[1, 2, 3, 4, 4, 5]):\n    return int(statistics.median(nums))",
      "def func(matrix=[[1, 2, 3], [4, 5, 6]]):\n    result = min(max(row) for row in matrix)\n    return result",
      "def func(lst=[1, 2, 3, 4]):\n    x = sum(x**2 for x in lst)\n    y = sum(x**3 for x in lst)\n    return y // x"
    ],
    "4": [
      "def func(lst=[1,2,3,4,5,6,7]):\n    x = sum([i for i in lst if i % 2 == 0])\n    y = sum([i for i in lst if i % 2 != 0])\n    return abs((x - y))",
      "def func(n=5):\n    a = [x for x in range(1, n + 1)]\n    b = [x * (x % 2) for x in a]\n    c = sum(b) - max(b)\n    return c",
      "def func(lst=[1,2,3,4,5,6,7]):\n    x = sum([i for i in lst if i % 2 == 0])\n    y = sum([i for i in lst if i % 2 != 0])\n    return abs((x - y))",
      "def func(lst=[0, 2, 4, 6]):\n    total = ''\n    for i, x in enumerate(lst):\n        total += str((i + 1) * x)\n    return max(list(total))",
      "def func(lst=[7, 5, 3, 1]):\n    squares = [x**2 for x in lst]\n    return min(list(str(sum(squares))))",
      "def func(lst=[1, 4, 9, 16, 25, 36]):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 2 == 0:\n            total -= val\n        else:\n            total += val\n    total = abs(total)\n    return sum(int(digit) \n            for digit in str(total))"
    ],
    "5": [
      "def func(lst=[1, 2, 3, 4, 2, 3, 2, 1]):\n    if sum(lst[4:]) <= 8:\n        return sum(lst[:4]) * 1/2\n    else:\n        return sum(lst) * 1/4",
      "def func(n=4):\n    if n <= 1:\n        return 1\n    else:\n        return func(n-1) + func(n-2)",
      "def func(lst=[2, 3, 5, 7]):\n    res = [x for x in lst if x % 2 != 0]\n    return sum(res) // len(res)",
      "def func(lst=[1,2,3,4], d={'a':1,'b':2}):\n    res = 0\n    for i in lst:\n        for k,v in d.items():\n            if i == v:\n                res += i * v\n    return res"
    ],
    "6": [
      "def func(lst=[1, 2, 3, 4, 5]):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            total += lst[i]\n    return total",
      "def func(d={'a': 1, 'b': 2, 'c': 3}):\n    total = sum(v for k, v in d.items() if k < 'c')\n    return total + len(d)"
    ],
    "7": [
      "def func(a=5, b=3):\n    total = 0\n    for i in range(1, a+1):\n        total += (i ** b) % 7\n    return total % 8",
      "def func(lst=[[1, 2], [3, 4], [5, 6]]):\n    total = sum(sum(sublst) for sublst in lst)\n    return total // len(lst)"
    ],
    "8": [
      "def func(lst=[0, 2, 4, 6]):\n    total = ''\n    for i, x in enumerate(lst):\n        total += str((i + 1) * (x ** (i % 3)))\n    return max(list(total))",
      "import math\n\ndef func(nums=[1, 2, 3, 4]):\n    total = math.prod(num for num in nums) \n    x = max(nums[:3])\n    return total // x"
    ]
  },
  "hard": {
    "1": [
      "hard",
      "hard"
    ],
    "2": [
      "hard",
      "hard"
    ],
    "3": [
      "hard",
      "hard"
    ],
    "4": [
      "hard",
      "hard"
    ],
    "5": [
      "hard",
      "hard"
    ],
    "6": [
      "hard",
      "hard"
    ],
    "7": [
      "hard",
      "hard"
    ],
    "8": [
      "hard",
      "hard"
    ]
  }
}
